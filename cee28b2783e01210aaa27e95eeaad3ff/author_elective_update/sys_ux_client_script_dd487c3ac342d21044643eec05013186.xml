<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="DELETE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Record page 3 column layout">7848b43ac342d21044643eec05013181</macroponent>
        <name>On Gen AI Data Fetch</name>
        <preset/>
        <required_translations>[
    {
        "message": "This article was drafted by Now Assist. Be sure to review it for accuracy before saving."
    },
    {
        "message": "There was a problem generating this article with Now Assist. You can write it yourself now if you'd like."
    }
]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
async function handler({
    api,
    event,
    helpers,
    imports
}) {
    if (event.name === "DATA_FETCH_SUCCEEDED") {
        if(api.state.selectedLanguage){
            const languageTimeout = await helpers.timing.setTimeout(function() {
                    api.emit('GEN_AI_SET_FIELD', {
                        fieldName: 'language',
                        value: api.state.selectedLanguage
                    });
            }, 2500);
        }
        if (api.state.isGenAiTimedOut) {
            // TODO: send Gen AI feedback = Ignored
            return;
        }
        var output = api.data.generate_article_content_with_gen_ai_1.output;

        if (output.success) {
            if (output.isAsync) {
                api.setState('asyncResponseId', output.content);
                api.setState('subscribeAsyncResponse', true);
            } else {
                api.setState('isGenAiGenerating', false);
                helpers.timing.clearTimeout(api.state.genAiTimeoutId);
                var response = output.content;
                if (response.success) {
                    for (var key in response.fields) {
                        api.emit('GEN_AI_SET_FIELD', {
                            fieldName: key,
                            value: response.fields[key]
                        });
                    }
                    api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                        items: [{
                            id: "na_drafted",
                            status: "moderate",
                            icon: "ai-sparkle-fill",
                            content: await helpers.translate("This article was drafted by Now Assist. Be sure to review it for accuracy before saving."),
                            action: {
                                type: "dismiss"
                            }
                        }]
                    });
                    api.setState('isGenAiGenerated', true);
                    api.setState('telemetryPayload', {
                        event_key: 'taskList',
                        targetTableSysId: api.data.record.sysId,
                        selectedRecords: [api.state.genAiSourceRecordId]
                    });
                    api.setState('isTelemetryExecuting', true);
                } else {
                    api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                        items: [{
                            id: "na_error",
                            status: "critical",
                            icon: "ai-sparkle-fill",
                            content: response.errorMessage,
                            action: {
                                type: "dismiss"
                            }
                        }]
                    });
                }
                api.emit("NOW_UXF_PAGE#REMOVE_NOTIFICATIONS", {
                    items: [{
                        id: "na_drafting"
                    }]
                });
                helpers.modal.close("modal_gen_ai");
            }
        } else {
            // This branch of code should be empty since the "generate" databroker will be executed immediately on load
            // Therefore, common ending script for both DATA_FETCH_SUCCEEDED and DATA_FETCH_FAILED must be manually repeated, 
            //  should not be put at the end of the script out side the outer most if else statement
        }
    } else {
        api.setState('isGenAiGenerating', false);
        helpers.timing.clearTimeout(api.state.genAiTimeoutId);

        if (api.state.isGenAiTimedOut) {
            return;
        }

        api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
            items: [{
                id: "na_error",
                status: "critical",
                icon: "ai-sparkle-fill",
                content: await helpers.translate("There was a problem generating this article with Now Assist. You can write it yourself now if you'd like."),
                action: {
                    type: "dismiss"
                }
            }]
        });

        api.emit("NOW_UXF_PAGE#REMOVE_NOTIFICATIONS", {
            items: [{
                id: "na_drafting"
            }]
        });
        helpers.modal.close("modal_gen_ai");
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-27 03:53:33</sys_created_on>
        <sys_id>dd487c3ac342d21044643eec05013186</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>On Gen AI Data Fetch</sys_name>
        <sys_package display_value="ePOs" source="x_1097202_epos">cee28b2783e01210aaa27e95eeaad3ff</sys_package>
        <sys_policy/>
        <sys_scope display_value="ePOs">cee28b2783e01210aaa27e95eeaad3ff</sys_scope>
        <sys_update_name>sys_ux_client_script_dd487c3ac342d21044643eec05013186</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-27 03:53:33</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="ePOs">cee28b2783e01210aaa27e95eeaad3ff</application>
        <file_path/>
        <instance_id>63d4c980db3e3dd439639027c596195b</instance_id>
        <instance_name>dev223172</instance_name>
        <name>sys_ux_client_script_dd487c3ac342d21044643eec05013186</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_client_script"&gt;&lt;sys_ux_client_script action="INSERT_OR_UPDATE"&gt;&lt;controller_preset/&gt;&lt;includes/&gt;&lt;macroponent display_value="Record page 3 column layout"&gt;7848b43ac342d21044643eec05013181&lt;/macroponent&gt;&lt;name&gt;On Gen AI Data Fetch&lt;/name&gt;&lt;preset/&gt;&lt;required_translations&gt;[
    {
        "message": "This article was drafted by Now Assist. Be sure to review it for accuracy before saving."
    },
    {
        "message": "There was a problem generating this article with Now Assist. You can write it yourself now if you'd like."
    }
]&lt;/required_translations&gt;&lt;script&gt;&lt;![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
async function handler({
    api,
    event,
    helpers,
    imports
}) {
    if (event.name === "DATA_FETCH_SUCCEEDED") {
        if(api.state.selectedLanguage){
            const languageTimeout = await helpers.timing.setTimeout(function() {
                    api.emit('GEN_AI_SET_FIELD', {
                        fieldName: 'language',
                        value: api.state.selectedLanguage
                    });
            }, 2500);
        }
        if (api.state.isGenAiTimedOut) {
            // TODO: send Gen AI feedback = Ignored
            return;
        }
        var output = api.data.generate_article_content_with_gen_ai_1.output;

        if (output.success) {
            if (output.isAsync) {
                api.setState('asyncResponseId', output.content);
                api.setState('subscribeAsyncResponse', true);
            } else {
                api.setState('isGenAiGenerating', false);
                helpers.timing.clearTimeout(api.state.genAiTimeoutId);
                var response = output.content;
                if (response.success) {
                    for (var key in response.fields) {
                        api.emit('GEN_AI_SET_FIELD', {
                            fieldName: key,
                            value: response.fields[key]
                        });
                    }
                    api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                        items: [{
                            id: "na_drafted",
                            status: "moderate",
                            icon: "ai-sparkle-fill",
                            content: await helpers.translate("This article was drafted by Now Assist. Be sure to review it for accuracy before saving."),
                            action: {
                                type: "dismiss"
                            }
                        }]
                    });
                    api.setState('isGenAiGenerated', true);
                    api.setState('telemetryPayload', {
                        event_key: 'taskList',
                        targetTableSysId: api.data.record.sysId,
                        selectedRecords: [api.state.genAiSourceRecordId]
                    });
                    api.setState('isTelemetryExecuting', true);
                } else {
                    api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
                        items: [{
                            id: "na_error",
                            status: "critical",
                            icon: "ai-sparkle-fill",
                            content: response.errorMessage,
                            action: {
                                type: "dismiss"
                            }
                        }]
                    });
                }
                api.emit("NOW_UXF_PAGE#REMOVE_NOTIFICATIONS", {
                    items: [{
                        id: "na_drafting"
                    }]
                });
                helpers.modal.close("modal_gen_ai");
            }
        } else {
            // This branch of code should be empty since the "generate" databroker will be executed immediately on load
            // Therefore, common ending script for both DATA_FETCH_SUCCEEDED and DATA_FETCH_FAILED must be manually repeated, 
            //  should not be put at the end of the script out side the outer most if else statement
        }
    } else {
        api.setState('isGenAiGenerating', false);
        helpers.timing.clearTimeout(api.state.genAiTimeoutId);

        if (api.state.isGenAiTimedOut) {
            return;
        }

        api.emit("NOW_UXF_PAGE#ADD_NOTIFICATIONS", {
            items: [{
                id: "na_error",
                status: "critical",
                icon: "ai-sparkle-fill",
                content: await helpers.translate("There was a problem generating this article with Now Assist. You can write it yourself now if you'd like."),
                action: {
                    type: "dismiss"
                }
            }]
        });

        api.emit("NOW_UXF_PAGE#REMOVE_NOTIFICATIONS", {
            items: [{
                id: "na_drafting"
            }]
        });
        helpers.modal.close("modal_gen_ai");
    }
}]]&gt;&lt;/script&gt;&lt;script_api_version&gt;2.0.0&lt;/script_api_version&gt;&lt;sys_class_name&gt;sys_ux_client_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-11-27 03:53:33&lt;/sys_created_on&gt;&lt;sys_id&gt;dd487c3ac342d21044643eec05013186&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;On Gen AI Data Fetch&lt;/sys_name&gt;&lt;sys_package display_value="ePOs" source="x_1097202_epos"&gt;cee28b2783e01210aaa27e95eeaad3ff&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="ePOs"&gt;cee28b2783e01210aaa27e95eeaad3ff&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ux_client_script_dd487c3ac342d21044643eec05013186&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-11-27 03:53:33&lt;/sys_updated_on&gt;&lt;target&gt;macroponent&lt;/target&gt;&lt;type&gt;default&lt;/type&gt;&lt;/sys_ux_client_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1024267864</payload_hash>
        <record_name>On Gen AI Data Fetch</record_name>
        <reverted_from/>
        <source>03165475c3f5121044643eec050131f9</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-27 03:53:33</sys_created_on>
        <sys_id>59487c3ac342d21044643eec05013189</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1936bc0bb2f0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-27 03:53:33</sys_updated_on>
        <type>UX Client Script</type>
        <update_guid>5d487c3a7742d210d203723f6689d888</update_guid>
        <update_guid_history>5d487c3a7742d210d203723f6689d888:-1024267864</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-27 04:11:34</sys_created_on>
        <sys_db_object display_value="" name="sys_ux_client_script">sys_ux_client_script</sys_db_object>
        <sys_id>22a6058db9064020a33c31c18fb64900</sys_id>
        <sys_metadata>dd487c3ac342d21044643eec05013186</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>On Gen AI Data Fetch</sys_name>
        <sys_package display_value="ePOs" source="x_1097202_epos">cee28b2783e01210aaa27e95eeaad3ff</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="ePOs">cee28b2783e01210aaa27e95eeaad3ff</sys_scope>
        <sys_scope_delete display_value="">a635df81ce854d32b538fed885edec84</sys_scope_delete>
        <sys_update_name>sys_ux_client_script_dd487c3ac342d21044643eec05013186</sys_update_name>
        <sys_update_version display_value="sys_ux_client_script_dd487c3ac342d21044643eec05013186">59487c3ac342d21044643eec05013189</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-27 04:11:34</sys_updated_on>
    </sys_metadata_delete>
</record_update>
